// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
insert into users (username, email, hashed_passwd) values (?, ?, ?)
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	HashedPasswd string `json:"hashedPasswd"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.HashedPasswd)
}

const findUser = `-- name: FindUser :one
select id, username, email, hashed_passwd, passwd_changed_at, created_at, updated_at from users
where username = ? limit 1
`

func (q *Queries) FindUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPasswd,
		&i.PasswdChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select id, username, email, hashed_passwd, passwd_changed_at, created_at, updated_at from users
where id = ? limit 1
`

func (q *Queries) GetUser(ctx context.Context, id sql.NullInt64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPasswd,
		&i.PasswdChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
