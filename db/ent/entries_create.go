// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jrmarcco/go-backend-demo/db/ent/entries"
)

// EntriesCreate is the builder for creating a Entries entity.
type EntriesCreate struct {
	config
	mutation *EntriesMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (ec *EntriesCreate) SetAccountID(u uint64) *EntriesCreate {
	ec.mutation.SetAccountID(u)
	return ec
}

// SetAmount sets the "amount" field.
func (ec *EntriesCreate) SetAmount(i int64) *EntriesCreate {
	ec.mutation.SetAmount(i)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EntriesCreate) SetCreatedAt(t time.Time) *EntriesCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EntriesCreate) SetNillableCreatedAt(t *time.Time) *EntriesCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EntriesCreate) SetUpdatedAt(t time.Time) *EntriesCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EntriesCreate) SetNillableUpdatedAt(t *time.Time) *EntriesCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// Mutation returns the EntriesMutation object of the builder.
func (ec *EntriesCreate) Mutation() *EntriesMutation {
	return ec.mutation
}

// Save creates the Entries in the database.
func (ec *EntriesCreate) Save(ctx context.Context) (*Entries, error) {
	var (
		err  error
		node *Entries
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntriesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Entries)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntriesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntriesCreate) SaveX(ctx context.Context) *Entries {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntriesCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntriesCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntriesCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := entries.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := entries.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntriesCreate) check() error {
	if _, ok := ec.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Entries.account_id"`)}
	}
	if v, ok := ec.mutation.AccountID(); ok {
		if err := entries.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "Entries.account_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Entries.amount"`)}
	}
	if v, ok := ec.mutation.Amount(); ok {
		if err := entries.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Entries.amount": %w`, err)}
		}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Entries.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Entries.updated_at"`)}
	}
	return nil
}

func (ec *EntriesCreate) sqlSave(ctx context.Context) (*Entries, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ec *EntriesCreate) createSpec() (*Entries, *sqlgraph.CreateSpec) {
	var (
		_node = &Entries{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entries.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: entries.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.AccountID(); ok {
		_spec.SetField(entries.FieldAccountID, field.TypeUint64, value)
		_node.AccountID = value
	}
	if value, ok := ec.mutation.Amount(); ok {
		_spec.SetField(entries.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(entries.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(entries.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// EntriesCreateBulk is the builder for creating many Entries entities in bulk.
type EntriesCreateBulk struct {
	config
	builders []*EntriesCreate
}

// Save creates the Entries entities in the database.
func (ecb *EntriesCreateBulk) Save(ctx context.Context) ([]*Entries, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entries, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntriesCreateBulk) SaveX(ctx context.Context) []*Entries {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntriesCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntriesCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
